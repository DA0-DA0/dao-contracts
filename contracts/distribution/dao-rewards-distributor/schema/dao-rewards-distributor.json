{
  "contract_name": "dao-rewards-distributor",
  "contract_version": "2.5.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "owner": {
        "description": "The owner of the contract. Is able to fund the contract and update the reward duration. If not provided, the instantiator is used.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Called when a member is added or removed to a cw4-groups or cw721-roles contract.",
        "type": "object",
        "required": [
          "member_changed_hook"
        ],
        "properties": {
          "member_changed_hook": {
            "$ref": "#/definitions/MemberChangedHookMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called when NFTs are staked or unstaked.",
        "type": "object",
        "required": [
          "nft_stake_change_hook"
        ],
        "properties": {
          "nft_stake_change_hook": {
            "$ref": "#/definitions/NftStakeChangedHookMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called when tokens are staked or unstaked.",
        "type": "object",
        "required": [
          "stake_change_hook"
        ],
        "properties": {
          "stake_change_hook": {
            "$ref": "#/definitions/StakeChangedHookMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "registers a new distribution",
        "type": "object",
        "required": [
          "create"
        ],
        "properties": {
          "create": {
            "$ref": "#/definitions/CreateMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "updates the config for a distribution",
        "type": "object",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "emission_rate": {
                "description": "reward emission rate",
                "anyOf": [
                  {
                    "$ref": "#/definitions/EmissionRate"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "hook_caller": {
                "description": "address that will update the reward split when the voting power distribution changes",
                "type": [
                  "string",
                  "null"
                ]
              },
              "id": {
                "description": "distribution ID to update",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "open_funding": {
                "description": "whether or not non-owners can fund the distribution",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "vp_contract": {
                "description": "address to query the voting power",
                "type": [
                  "string",
                  "null"
                ]
              },
              "withdraw_destination": {
                "description": "destination address for reward clawbacks. defaults to owner",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to fund this contract with cw20 tokens.",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to fund this contract with native tokens.",
        "type": "object",
        "required": [
          "fund"
        ],
        "properties": {
          "fund": {
            "$ref": "#/definitions/FundMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to fund the latest distribution with native tokens.",
        "type": "object",
        "required": [
          "fund_latest"
        ],
        "properties": {
          "fund_latest": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claims rewards for the sender.",
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "withdraws the undistributed rewards for a distribution. members can claim whatever they earned until this point. this is effectively an inverse to fund and does not affect any already-distributed rewards.",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "forcibly withdraw funds from the contract. this is unsafe and should only be used to recover funds that are stuck in the contract.",
        "type": "object",
        "required": [
          "unsafe_force_withdraw"
        ],
        "properties": {
          "unsafe_force_withdraw": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
        "type": "object",
        "required": [
          "update_ownership"
        ],
        "properties": {
          "update_ownership": {
            "$ref": "#/definitions/Action"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "Actions that can be taken to alter the contract's ownership",
        "oneOf": [
          {
            "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
            "type": "object",
            "required": [
              "transfer_ownership"
            ],
            "properties": {
              "transfer_ownership": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "expiry": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
            "type": "string",
            "enum": [
              "accept_ownership"
            ]
          },
          {
            "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
            "type": "string",
            "enum": [
              "renounce_ownership"
            ]
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CreateMsg": {
        "type": "object",
        "required": [
          "denom",
          "emission_rate",
          "hook_caller",
          "vp_contract"
        ],
        "properties": {
          "denom": {
            "description": "denom to distribute",
            "allOf": [
              {
                "$ref": "#/definitions/UncheckedDenom"
              }
            ]
          },
          "emission_rate": {
            "description": "reward emission rate",
            "allOf": [
              {
                "$ref": "#/definitions/EmissionRate"
              }
            ]
          },
          "hook_caller": {
            "description": "address that will update the reward split when the voting power distribution changes",
            "type": "string"
          },
          "open_funding": {
            "description": "whether or not non-owners can fund the distribution. defaults to true.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "vp_contract": {
            "description": "address to query the voting power",
            "type": "string"
          },
          "withdraw_destination": {
            "description": "destination address for reward clawbacks. defaults to owner.",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EmissionRate": {
        "description": "defines how many tokens (amount) should be distributed per amount of time (duration). e.g. 5udenom per hour.",
        "oneOf": [
          {
            "description": "rewards are paused",
            "type": "object",
            "required": [
              "paused"
            ],
            "properties": {
              "paused": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "rewards are distributed immediately",
            "type": "object",
            "required": [
              "immediate"
            ],
            "properties": {
              "immediate": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "rewards are distributed at a constant rate",
            "type": "object",
            "required": [
              "linear"
            ],
            "properties": {
              "linear": {
                "type": "object",
                "required": [
                  "amount",
                  "continuous",
                  "duration"
                ],
                "properties": {
                  "amount": {
                    "description": "amount of tokens to distribute per amount of time",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  },
                  "continuous": {
                    "description": "whether or not reward distribution is continuous: whether future funding after distribution finishes should be applied to the past, or rewards are paused once all funding has been distributed. all continuously backfilled rewards are distributed based on the current voting power.",
                    "type": "boolean"
                  },
                  "duration": {
                    "description": "duration of time to distribute amount",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Duration"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FundMsg": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "distribution ID to fund",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "MemberChangedHookMsg": {
        "description": "MemberChangedHookMsg should be de/serialized under `MemberChangedHook()` variant in a ExecuteMsg. This contains a list of all diffs on the given transaction.",
        "type": "object",
        "required": [
          "diffs"
        ],
        "properties": {
          "diffs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MemberDiff"
            }
          }
        },
        "additionalProperties": false
      },
      "MemberDiff": {
        "description": "MemberDiff shows the old and new states for a given cw4 member They cannot both be None. old = None, new = Some -> Insert old = Some, new = Some -> Update old = Some, new = None -> Delete",
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "new": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "old": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "NftStakeChangedHookMsg": {
        "description": "An enum representing NFT staking hooks.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "stake"
            ],
            "properties": {
              "stake": {
                "type": "object",
                "required": [
                  "addr",
                  "token_id"
                ],
                "properties": {
                  "addr": {
                    "$ref": "#/definitions/Addr"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "unstake"
            ],
            "properties": {
              "unstake": {
                "type": "object",
                "required": [
                  "addr",
                  "token_ids"
                ],
                "properties": {
                  "addr": {
                    "$ref": "#/definitions/Addr"
                  },
                  "token_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "StakeChangedHookMsg": {
        "description": "An enum representing staking hooks.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "stake"
            ],
            "properties": {
              "stake": {
                "type": "object",
                "required": [
                  "addr",
                  "amount"
                ],
                "properties": {
                  "addr": {
                    "$ref": "#/definitions/Addr"
                  },
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "unstake"
            ],
            "properties": {
              "unstake": {
                "type": "object",
                "required": [
                  "addr",
                  "amount"
                ],
                "properties": {
                  "addr": {
                    "$ref": "#/definitions/Addr"
                  },
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UncheckedDenom": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns contract version info",
        "type": "object",
        "required": [
          "info"
        ],
        "properties": {
          "info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns information about the ownership of this contract.",
        "type": "object",
        "required": [
          "ownership"
        ],
        "properties": {
          "ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the pending rewards for the given address.",
        "type": "object",
        "required": [
          "pending_rewards"
        ],
        "properties": {
          "pending_rewards": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the undistributed rewards for a distribution.",
        "type": "object",
        "required": [
          "undistributed_rewards"
        ],
        "properties": {
          "undistributed_rewards": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the state of the given distribution.",
        "type": "object",
        "required": [
          "distribution"
        ],
        "properties": {
          "distribution": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the state of all the distributions.",
        "type": "object",
        "required": [
          "distributions"
        ],
        "properties": {
          "distributions": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "distribution": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DistributionState",
      "description": "the state of a reward distribution",
      "type": "object",
      "required": [
        "active_epoch",
        "denom",
        "funded_amount",
        "historical_earned_puvp",
        "hook_caller",
        "id",
        "open_funding",
        "vp_contract",
        "withdraw_destination"
      ],
      "properties": {
        "active_epoch": {
          "description": "current distribution epoch state",
          "allOf": [
            {
              "$ref": "#/definitions/Epoch"
            }
          ]
        },
        "denom": {
          "description": "validated denom (native or cw20)",
          "allOf": [
            {
              "$ref": "#/definitions/Denom"
            }
          ]
        },
        "funded_amount": {
          "description": "total amount of rewards funded that will be distributed in the active epoch.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "historical_earned_puvp": {
          "description": "historical rewards earned per unit voting power from past epochs due to changes in the emission rate. each time emission rate is changed, this value is increased by the `active_epoch`'s rewards earned puvp.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "hook_caller": {
          "description": "address that will update the reward split when the voting power distribution changes",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "id": {
          "description": "distribution ID",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "open_funding": {
          "description": "whether or not non-owners can fund the distribution",
          "type": "boolean"
        },
        "vp_contract": {
          "description": "address to query the voting power",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "withdraw_destination": {
          "description": "destination address for reward clawbacks",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Denom": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "EmissionRate": {
          "description": "defines how many tokens (amount) should be distributed per amount of time (duration). e.g. 5udenom per hour.",
          "oneOf": [
            {
              "description": "rewards are paused",
              "type": "object",
              "required": [
                "paused"
              ],
              "properties": {
                "paused": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "rewards are distributed immediately",
              "type": "object",
              "required": [
                "immediate"
              ],
              "properties": {
                "immediate": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "rewards are distributed at a constant rate",
              "type": "object",
              "required": [
                "linear"
              ],
              "properties": {
                "linear": {
                  "type": "object",
                  "required": [
                    "amount",
                    "continuous",
                    "duration"
                  ],
                  "properties": {
                    "amount": {
                      "description": "amount of tokens to distribute per amount of time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "continuous": {
                      "description": "whether or not reward distribution is continuous: whether future funding after distribution finishes should be applied to the past, or rewards are paused once all funding has been distributed. all continuously backfilled rewards are distributed based on the current voting power.",
                      "type": "boolean"
                    },
                    "duration": {
                      "description": "duration of time to distribute amount",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Epoch": {
          "type": "object",
          "required": [
            "emission_rate",
            "ends_at",
            "last_updated_total_earned_puvp",
            "started_at",
            "total_earned_puvp"
          ],
          "properties": {
            "emission_rate": {
              "description": "reward emission rate",
              "allOf": [
                {
                  "$ref": "#/definitions/EmissionRate"
                }
              ]
            },
            "ends_at": {
              "description": "the time when all funded rewards are allocated to users and thus the distribution period ends.",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "last_updated_total_earned_puvp": {
              "description": "time when total_earned_puvp was last updated",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "started_at": {
              "description": "the time when the current reward distribution period started. period finishes iff it reaches its end.",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "total_earned_puvp": {
              "description": "total rewards earned per unit voting power from started_at to last_updated_total_earned_puvp",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "distributions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DistributionsResponse",
      "type": "object",
      "required": [
        "distributions"
      ],
      "properties": {
        "distributions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DistributionState"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Denom": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "DistributionState": {
          "description": "the state of a reward distribution",
          "type": "object",
          "required": [
            "active_epoch",
            "denom",
            "funded_amount",
            "historical_earned_puvp",
            "hook_caller",
            "id",
            "open_funding",
            "vp_contract",
            "withdraw_destination"
          ],
          "properties": {
            "active_epoch": {
              "description": "current distribution epoch state",
              "allOf": [
                {
                  "$ref": "#/definitions/Epoch"
                }
              ]
            },
            "denom": {
              "description": "validated denom (native or cw20)",
              "allOf": [
                {
                  "$ref": "#/definitions/Denom"
                }
              ]
            },
            "funded_amount": {
              "description": "total amount of rewards funded that will be distributed in the active epoch.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "historical_earned_puvp": {
              "description": "historical rewards earned per unit voting power from past epochs due to changes in the emission rate. each time emission rate is changed, this value is increased by the `active_epoch`'s rewards earned puvp.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "hook_caller": {
              "description": "address that will update the reward split when the voting power distribution changes",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "id": {
              "description": "distribution ID",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "open_funding": {
              "description": "whether or not non-owners can fund the distribution",
              "type": "boolean"
            },
            "vp_contract": {
              "description": "address to query the voting power",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "withdraw_destination": {
              "description": "destination address for reward clawbacks",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "EmissionRate": {
          "description": "defines how many tokens (amount) should be distributed per amount of time (duration). e.g. 5udenom per hour.",
          "oneOf": [
            {
              "description": "rewards are paused",
              "type": "object",
              "required": [
                "paused"
              ],
              "properties": {
                "paused": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "rewards are distributed immediately",
              "type": "object",
              "required": [
                "immediate"
              ],
              "properties": {
                "immediate": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "rewards are distributed at a constant rate",
              "type": "object",
              "required": [
                "linear"
              ],
              "properties": {
                "linear": {
                  "type": "object",
                  "required": [
                    "amount",
                    "continuous",
                    "duration"
                  ],
                  "properties": {
                    "amount": {
                      "description": "amount of tokens to distribute per amount of time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "continuous": {
                      "description": "whether or not reward distribution is continuous: whether future funding after distribution finishes should be applied to the past, or rewards are paused once all funding has been distributed. all continuously backfilled rewards are distributed based on the current voting power.",
                      "type": "boolean"
                    },
                    "duration": {
                      "description": "duration of time to distribute amount",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Epoch": {
          "type": "object",
          "required": [
            "emission_rate",
            "ends_at",
            "last_updated_total_earned_puvp",
            "started_at",
            "total_earned_puvp"
          ],
          "properties": {
            "emission_rate": {
              "description": "reward emission rate",
              "allOf": [
                {
                  "$ref": "#/definitions/EmissionRate"
                }
              ]
            },
            "ends_at": {
              "description": "the time when all funded rewards are allocated to users and thus the distribution period ends.",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "last_updated_total_earned_puvp": {
              "description": "time when total_earned_puvp was last updated",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "started_at": {
              "description": "the time when the current reward distribution period started. period finishes iff it reaches its end.",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "total_earned_puvp": {
              "description": "total rewards earned per unit voting power from started_at to last_updated_total_earned_puvp",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InfoResponse",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/ContractVersion"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ContractVersion": {
          "type": "object",
          "required": [
            "contract",
            "version"
          ],
          "properties": {
            "contract": {
              "description": "contract is the crate name of the implementing contract, eg. `crate:cw20-base` we will use other prefixes for other languages, and their standard global namespacing",
              "type": "string"
            },
            "version": {
              "description": "version is any string that this implementation knows. It may be simple counter \"1\", \"2\". or semantic version on release tags \"v0.7.0\", or some custom feature flag list. the only code that needs to understand the version parsing is code that knows how to migrate from the given contract (and is tied to it's implementation somehow)",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "ownership": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ownership_for_Addr",
      "description": "The contract's ownership info",
      "type": "object",
      "properties": {
        "owner": {
          "description": "The contract's current owner. `None` if the ownership has been renounced.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_expiry": {
          "description": "The deadline for the pending owner to accept the ownership. `None` if there isn't a pending ownership transfer, or if a transfer exists and it doesn't have a deadline.",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_owner": {
          "description": "The account who has been proposed to take over the ownership. `None` if there isn't a pending ownership transfer.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "pending_rewards": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PendingRewardsResponse",
      "type": "object",
      "required": [
        "pending_rewards"
      ],
      "properties": {
        "pending_rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DistributionPendingRewards"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Denom": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "DistributionPendingRewards": {
          "type": "object",
          "required": [
            "denom",
            "id",
            "pending_rewards"
          ],
          "properties": {
            "denom": {
              "description": "denomination of the pending rewards",
              "allOf": [
                {
                  "$ref": "#/definitions/Denom"
                }
              ]
            },
            "id": {
              "description": "distribution ID",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pending_rewards": {
              "description": "amount of pending rewards in the denom being distributed",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "undistributed_rewards": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
